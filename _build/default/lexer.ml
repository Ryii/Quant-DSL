# 1 "lexer.mll"
 
(* lexer.mll *)
open Parser

let keyword_table = Hashtbl.create 32

let _ =
  List.iter (fun (k, v) -> Hashtbl.add keyword_table k v)
    [
      ("let", LET);
      ("in", IN);
      ("if", IF);
      ("then", THEN);
      ("else", ELSE);
      ("true", TRUE);
      ("false", FALSE);
      ("function", FUNCTION);
      ("return", RETURN);
      ("while", WHILE);
      ("do", DO);
      ("for", FOR);
      ("to", TO);
      ("break", BREAK);
      ("continue", CONTINUE);
      ("and", AND);
      ("or", OR);
      ("not", NOT);
    ]

let buffer = Buffer.create 16

# 34 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\226\255\227\255\228\255\229\255\230\255\231\255\232\255\
    \233\255\234\255\235\255\236\255\002\000\003\000\031\000\035\000\
    \244\255\246\255\247\255\248\255\249\255\078\000\155\000\094\000\
    \254\255\255\255\252\255\253\255\165\000\175\000\242\255\241\255\
    \238\255\237\255\001\000\252\255\253\255\254\255\255\255\004\000\
    \253\255\254\255\077\000\255\255\002\000\253\255\254\255\255\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\016\000\015\000\029\000\012\000\
    \255\255\255\255\255\255\255\255\255\255\005\000\004\000\010\000\
    \255\255\255\255\255\255\255\255\255\255\004\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\035\000\000\000\000\000\000\000\000\000\040\000\
    \000\000\000\000\255\255\000\000\045\000\000\000\000\000\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\024\000\037\000\047\000\025\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\014\000\020\000\038\000\000\000\000\000\000\000\000\000\
    \011\000\010\000\017\000\019\000\003\000\018\000\042\000\023\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\004\000\005\000\013\000\015\000\012\000\033\000\
    \032\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\007\000\031\000\006\000\016\000\021\000\
    \030\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\009\000\043\000\008\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \027\000\000\000\000\000\000\000\000\000\026\000\000\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\000\000\000\000\000\000\000\000\021\000\000\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\028\000\000\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\036\000\046\000\000\000\041\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\034\000\044\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\034\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
    \015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\042\000\000\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \023\000\255\255\255\255\255\255\255\255\023\000\255\255\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\255\255\255\255\255\255\255\255\021\000\255\255\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\022\000\255\255\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\034\000\044\000\255\255\039\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read lexbuf =
   __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 34 "lexer.mll"
                    ( read lexbuf )
# 193 "lexer.ml"

  | 1 ->
# 35 "lexer.mll"
                    ( NEWLINE )
# 198 "lexer.ml"

  | 2 ->
# 36 "lexer.mll"
                    ( comment lexbuf )
# 203 "lexer.ml"

  | 3 ->
# 37 "lexer.mll"
                    ( single_line_comment lexbuf )
# 208 "lexer.ml"

  | 4 ->
let
# 38 "lexer.mll"
                                    num
# 214 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 38 "lexer.mll"
                                        (
      FLOAT (float_of_string num)
    )
# 220 "lexer.ml"

  | 5 ->
let
# 41 "lexer.mll"
                                                           id
# 226 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 41 "lexer.mll"
                                                              (
      try Hashtbl.find keyword_table id with Not_found -> IDENT id
    )
# 232 "lexer.ml"

  | 6 ->
# 44 "lexer.mll"
                    ( Buffer.clear buffer; string_literal lexbuf; STRING (Buffer.contents buffer) )
# 237 "lexer.ml"

  | 7 ->
# 45 "lexer.mll"
                    ( PLUS )
# 242 "lexer.ml"

  | 8 ->
# 46 "lexer.mll"
                    ( MINUS )
# 247 "lexer.ml"

  | 9 ->
# 47 "lexer.mll"
                    ( TIMES )
# 252 "lexer.ml"

  | 10 ->
# 48 "lexer.mll"
                    ( DIVIDE )
# 257 "lexer.ml"

  | 11 ->
# 49 "lexer.mll"
                    ( POW )
# 262 "lexer.ml"

  | 12 ->
# 50 "lexer.mll"
                    ( EQ )
# 267 "lexer.ml"

  | 13 ->
# 51 "lexer.mll"
                    ( EQUAL )
# 272 "lexer.ml"

  | 14 ->
# 52 "lexer.mll"
                    ( NEQ )
# 277 "lexer.ml"

  | 15 ->
# 53 "lexer.mll"
                    ( LT )
# 282 "lexer.ml"

  | 16 ->
# 54 "lexer.mll"
                    ( GT )
# 287 "lexer.ml"

  | 17 ->
# 55 "lexer.mll"
                    ( LE )
# 292 "lexer.ml"

  | 18 ->
# 56 "lexer.mll"
                    ( GE )
# 297 "lexer.ml"

  | 19 ->
# 57 "lexer.mll"
                    ( LPAREN )
# 302 "lexer.ml"

  | 20 ->
# 58 "lexer.mll"
                    ( RPAREN )
# 307 "lexer.ml"

  | 21 ->
# 59 "lexer.mll"
                    ( LBRACE )
# 312 "lexer.ml"

  | 22 ->
# 60 "lexer.mll"
                    ( RBRACE )
# 317 "lexer.ml"

  | 23 ->
# 61 "lexer.mll"
                    ( LBRACKET )
# 322 "lexer.ml"

  | 24 ->
# 62 "lexer.mll"
                    ( RBRACKET )
# 327 "lexer.ml"

  | 25 ->
# 63 "lexer.mll"
                    ( SEMI )
# 332 "lexer.ml"

  | 26 ->
# 64 "lexer.mll"
                    ( COLON )
# 337 "lexer.ml"

  | 27 ->
# 65 "lexer.mll"
                    ( COMMA )
# 342 "lexer.ml"

  | 28 ->
# 66 "lexer.mll"
                    ( EOF )
# 347 "lexer.ml"

  | 29 ->
let
# 67 "lexer.mll"
         c
# 353 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 67 "lexer.mll"
                    ( failwith (Printf.sprintf "Unexpected character: %c" c) )
# 357 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and string_literal lexbuf =
   __ocaml_lex_string_literal_rec lexbuf 34
and __ocaml_lex_string_literal_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 70 "lexer.mll"
                    ( () )
# 369 "lexer.ml"

  | 1 ->
# 78 "lexer.mll"
                    ( failwith "Unterminated string" )
# 374 "lexer.ml"

  | 2 ->
# 79 "lexer.mll"
                    ( failwith "Unterminated string" )
# 379 "lexer.ml"

  | 3 ->
let
# 80 "lexer.mll"
         c
# 385 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 80 "lexer.mll"
                    ( Buffer.add_char buffer c; string_literal lexbuf )
# 389 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_literal_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 39
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 83 "lexer.mll"
                    ( read lexbuf )
# 401 "lexer.ml"

  | 1 ->
# 84 "lexer.mll"
                    ( failwith "Unterminated comment" )
# 406 "lexer.ml"

  | 2 ->
# 85 "lexer.mll"
                    ( comment lexbuf )
# 411 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and single_line_comment lexbuf =
   __ocaml_lex_single_line_comment_rec lexbuf 44
and __ocaml_lex_single_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 88 "lexer.mll"
                    ( read lexbuf )
# 423 "lexer.ml"

  | 1 ->
# 89 "lexer.mll"
                    ( EOF )
# 428 "lexer.ml"

  | 2 ->
# 90 "lexer.mll"
                    ( single_line_comment lexbuf )
# 433 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_single_line_comment_rec lexbuf __ocaml_lex_state

;;

